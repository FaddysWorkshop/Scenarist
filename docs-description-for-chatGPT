# Description of Faddy's Scenarist for ChatGPT to Write the Documentation

## Installing and Importing Faddy's Scenarist

`Scenarist` is a JavaScript asynchronous function exported as a default for the '@faddys/scenarist' module.
The module is available as a package in NPM.
To install the module, the `npm` command can be run from the directory of the project that desirs to use Scenarist as follows:

```sh
npm i @faddys/scenarist
```

Then, to import the module from the JavaScript code:

```js
import Scenarist from '@faddys/scenarist';
```

## How to Create Scenarist's Plays?

`Scenarist` can be called to create a `play` function for a scenario passed as the first parameter:

```js
import Scenarist from '@faddys/scenarist';

// Get a scenario someway and provide it to Scenarist to create a new play for that scenario:

const play = await Scenarist ( scenario );
```

## How to Write Scenarios for Scenarist and Play It's Directions?

The `scenario`, passed to `Scenarist` to create the `play`, can either be an object or function.

### Writing Object Scenarios

If the `scenario` is an object,
a property within this scenario (not just the owned ones) is considered a direction if the property's name starts with a `$` (dollar sign).
For example, if we want to write a scenario having a direction that can be played by passing the string `'hello'` to the `play` function:

```js
import Scenarist from '@faddys/scenarist';

const scenario = {

// Since the desired direction name is 'hello', add a property to the scenario object and name it $hello:

$hello () {

console .log ( "Hello World! This is Faddy's Scenarist in solidarity with The People of Palestine against israel till whole land is FREE!" );

}

};

// Let Scenarist create the play function for that scenario:

const play = await Scenarist ( scenario );

// Play the 'hello' direction:

await play ( 'hello' ); // The 'hello' direction is called!

// Output on console:

/*
Hello World! This is Faddy's Scenarist in solidarity with The People of Palestine against israel till whole land is FREE!
*/
```

If the name of a property of the `scenario` object is prefixed by `$_` (dollar sign followed by underscore),
the direction can then be played by calling the `play` function while providing the symbol returned from calling `Symbol .for ( directionName )`, where `directionName` is the variable having the value of the direction name.
For example:

```js
import Scenarist from '@faddys/scenarist';

const scenario = {

// Since the desired symbol direction name is 'hello', add a property to the scenario object and name it $_hello:

$_hello () {

console .log ( "Hello World! This is Faddy's Scenarist greeting you from a direction having a symbol name!" );

}

};

// Let Scenarist create the play function for that scenario:

const play = await Scenarist ( scenario );

// Play the 'hello' symbol direction:

play ( Symbol .for ( 'hello' ) );

// Output on console:

/*
Hello World! This is Faddy's Scenarist greeting you from a direction having a string name!
Hello World! This is Faddy's Scenarist greeting you from a direction having a symbol name!
*/
```

If the value of the property, in case it is direction within a `scenario`, is `'string'`, `'number'`, `'boolean'` or `'symbol'`,
the value will be returned directly when the direction is played.
For example:

```js
import Scenarist from '@faddys/scenarist';

// Let Scenarist create the play function for the following scenario having only straight directions:

const play = await Scenarist ( {

// Example for a direction named 'Palestine' and directs to a symbol:

$Palestine: Symbol .for ( 'RESISTANCE Till Whole Land is FREE!' ),

// Example for a direction named 'israel' and directs to a boolean

$israel: false,

// Example for a direction named 'question' and directs to a string

$question: "Why israel?",

// Example for a direction named 'resistance' and directs to a number

$resistance: 10.07

} );

// now, play the different directions that we wrote above and log the values, they direct to

for ( const direction of [ 'resistance', 'Palestine', 'question', 'israel' ] )
console .log (

`${ direction }: ${ ( await play ( direction ) ) .resolution }`

);

// Output on console:

/*
resistance:  10.07
Palestine:  Symbol(RESISTANCE Till Whole Land is FREE!)
question:  Why israel?
israel:  false
*/
```

If the type of the property (in case it is a direction) is a function,
the function will be called and the rest of the parameters that were passed to the play function will be passed to that called function along with a reference to the `play` function passed as the first parameter.
For example:

```js
import Scenarist from '@faddys/scenarist';


```

If the type of the property (in case it is a direction) is object, then the direction is pointing to a nested play whose scenario is that object.
For example, let's write a play whose scenario has directions pointing to nested plays:
